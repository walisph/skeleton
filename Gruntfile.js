/**
 * file: Gruntfile.js
 * description: This Grunt is generated by Walis Philippines Gruntfile generator 2
 * author: Jay Are Galinada
 */

var mozjpeg = require('imagemin-mozjpeg');

module.exports = function(grunt) {
    "use strict";

    grunt.initConfig({
        pkg: grunt.file.readJSON( "package.json" ),
        meta: {
            version: '0.2.0'
        },
        ////////////////////////////////////////
        // /!\ START OF CONFIGURATION /!\
        ////////////////////////////////////////
        //-CONFIGURATION
        path: {
            'assets'            : 'assets',
            'public'            : 'public/assets',
            'libraries'         : '<%= path.assets %>/libraries',
            'fonts'             : '<%= path.assets %>/fonts',
            'vendor'            : 'vendor',
            'coffeescripts'     : '<%= path.assets %>/coffeescripts',
            'coffee'            : '<%= path.assets %>/coffeescripts', // An alias for coffeescripts
            'compiled'          : 'storage/assets',
            'images'            : '<%= path.assets %>/images',
            'img'               : '<%= path.assets %>/images', // An alias for images
        },
        libraries: {
            'foundation'        : '<%= path.libraries %>/foundation',
            'fontAwesome'       : '<%= path.libraries %>/font-awesome'
        },
        foundation: {
            // Foundation 5 Configuration
            js: [
                '<%= libraries.foundation %>/js/foundation/foundation.js',
                '<%= libraries.foundation %>/js/foundation/foundation.*.js'
            ],
            scss: [
                '<%= libraries.foundation %>/scss/foundation.scss',
                '<%= libraries.foundation %>/scss/settings.scss',
            ],
            compiled: '<%= path.compiled %>/dependencies_foundation.js',
            css: '<%= path.compiled %>/foundation.css',
            min_css: '<%= path.compiled %>/foundation.min.css'
        },
        normalize: {
            scss: '<%= libraries.foundation %>/scss/normalize.scss',
            css: '<%= path.compiled %>/normalize.css',
            css_min: '<%= path.compiled %>/normalize.min.css'
        },
        fontAwesome: {
            scss: '<%= libraries.fontAwesome %>/scss/font-awesome.scss',
            css: '<%= path.compiled %>/font-awesome.css',
            css_min: '<%= path.compiled %>/font-awesome.min.css',
            fonts: [
                '<%= libraries.fontAwesome %>/fonts/fontawesome-webfont.eot',
                '<%= libraries.fontAwesome %>/fonts/fontawesome-webfont.svg',
                '<%= libraries.fontAwesome %>/fonts/fontawesome-webfont.ttf',
                '<%= libraries.fontAwesome %>/fonts/fontawesome-webfont.woff',
                '<%= libraries.fontAwesome %>/fonts/FontAwesome.otf'
            ]
        },
        jquery_plugins: {
            // jQUery Plugins Configuration
            js: [
                '<%= path.vendor %>/modernizr/modernizr.js',
                '<%= path.vendor %>/jquery.lazyload/jquery.lazyload.js',
                '<%= path.vendor %>/jquery.lazyload/jquery.scrollstop.js',
                // '<%= path.vendor %>/owl.carousel/dist/owl.carousel.js',
                '<%= path.vendor %>/owlcarousel/owl-carousel/owl.carousel.js',
                '<%= path.vendor %>/jquery-touchswipe/jquery.touchSwipe.js',
                '<%= path.vendor %>/jquery-validation/dist/jquery.validate.js',
                '<%= path.vendor %>/jquery-colorbox/jquery.colorbox.js',
                '<%= path.vendor %>/photoset-grid/jquery.photoset-grid.js',
                '<%= path.vendor %>/perfect-scrollbar/src/jquery.mousewheel.js',
                '<%= path.vendor %>/perfect-scrollbar/src/perfect-scrollbar.js',
                '<%= path.vendor %>/fastclick/lib/fastclick.js',
                '<%= path.vendor %>/jquery.cookie/jquery.cookie.js',
                '<%= path.vendor %>/jquery-placeholder/jquery.placeholder.js',
            ],
            compiled: '<%= path.compiled %>/dependencies_jquery_plugins.js'
        },
        backbone: {
            // Backbone Configuration
            js: [
                '<%= path.vendor %>/underscore-amd/underscore.js',
                '<%= path.vendor %>/backbone-amd/backbone.js'
            ],
            compiled: '<%= path.compiled %>/dependencies_backbone.js'
        },

        ////////////////////////////////////////
        // /!\ END OF CONFIGURATION /!\
        ////////////////////////////////////////
        sass: {
            //-SASS
            options: {
                quiet: true
            },
            dist: {
                files: {
                    '<%= foundation.css %>': '<%= foundation.scss %>', // Foundation
                    '<%= normalize.css %>': '<%= normalize.scss %>', // Normalize
                    '<%= fontAwesome.css %>': '<%= fontAwesome.scss %>' // Font-Awesome
                }
            }
        },
        uglify: {
            //-UGLIFY
            options: {
                preserveComments: false,
                banner: ['/*!',
                    ' * <%= pkg.name %> v<%= pkg.version %> (<%= pkg.homepage %>)',
                    ' * Copyright (c) 2014',
                    ' */',
                    ''].join('\n'),
                report: 'gzip',
                compress: true
            },
            min: {
                files: {
                    '<%= path.compiled %>/dependencies_foundation.min.js': '<%= foundation.compiled %>',
                    '<%= path.compiled %>/dependencies_backbone.min.js': '<%= backbone.compiled %>',
                    '<%= path.compiled %>/dependencies_jquery_plugins.min.js': '<%= jquery_plugins.compiled %>'
                }
            }
        },
        coffee: {
            //-COFFEE
            options: {
                bare: true
            }
        },
        concat: {
            //-CONCAT
            jquery_plugins: {
                src: '<%= jquery_plugins.js %>',
                dest: '<%= jquery_plugins.compiled %>'
            },
            backbone: {
                src: '<%= backbone.js %>',
                dest: '<%= backbone.compiled %>'
            },
            foundation: {
                src: '<%= foundation.js %>',
                dest: '<%= foundation.compiled %>'
            },
            js: {
                files: {
                    '<%= foundation.compiled %>': '<%= foundation.js %>',
                    '<%= backbone.compiled %>': '<%= backbone.js %>',
                    '<%= jquery_plugins.compiled %>': '<%= jquery_plugins.js %>',
                    '<%= path.compiled %>/dependencies.js': [ '<%= path.compiled %>/dependencies_*.js', '!<%= path.compiled %>/*.min.js' ],
                    '<%= path.compiled %>/dependencies.min.js': [ '<%= path.compiled %>/dependencies_*.min.js', ]
                }
            },
            css: {
                files: {
                    '<%= path.compiled %>/styles.css': [
                        '<%= normalize.css %>',
                        '<%= foundation.css %>',
                        '<%= fontAwesome.css %>',
                        '<%= path.vendor %>/animate.css/animate.css'
                    ]
                },
            }
        },
        copy: {
            //-COPY
            js: {
                expand: true,
                flatten: true,
                src: [ '<%= path.compiled %>/*.js' ],
                dest: '<%= path.public %>/js/',
                filter: 'isFile'
            },
            css: {
                expand: true,
                flatten: true,
                src: [ '<%= path.compiled %>/*.css' ],
                dest: '<%= path.public %>/css/',
                filter: 'isFile'
            },
            fonts: {
                expand: true,
                flatten: true,
                src: '<%= fontAwesome.fonts %>',
                dest: '<%= path.public %>/fonts/',
                filter: 'isFile'
            }
        },
        cssmin: {
            options: {
                banner: ['/*!',
                    ' * <%= pkg.name %> v<%= pkg.version %> (<%= pkg.homepage %>)',
                    ' * Copyright (c) 2014',
                    ' */',
                    ''].join('\n'),
                keepSpecialComments: 0,
                report: 'gzip'
            },
            dist: {
                files: {
                    '<%= path.compiled %>/styles.min.css': [
                        '<%= path.compiled %>/styles.css'
                    ]
                },
            }
        },
        imagemin: {
            options: {
                optimizationLevel: 3,
                use: [mozjpeg()]
            },
            dist: {
                files: [
                    {
                        expand: true,
                        flatten: true,
                        src: ['<%= path.images %>/**/*.{png,jpg,gif}'],
                        dest: '<%= path.public %>/images/'
                    }
                ]
            }
        },
        watch: {
            options: {
                reload: true,
                livereload: true
            },
            scss: {
                files: '<%= libraries.foundation %>/scss/**/*.scss',
                tasks: [ 'css' ]
            },
            php: {
                files: 'app/**/*.php',
                options: {
                    livereload: true
                }
            }
        }

    });

    /**
     * Load Plugins for Grunt
     */
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-coffee');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-contrib-imagemin');
    grunt.loadNpmTasks('grunt-contrib-compass');
    grunt.loadNpmTasks('grunt-contrib-sass');
    grunt.loadNpmTasks('grunt-contrib-less');
    grunt.loadNpmTasks('grunt-contrib-rename');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-copy');

    grunt.registerTask('js', ['concat:js', 'uglify', 'copy:js']);
    grunt.registerTask('css', ['sass', 'concat:css', 'copy:fonts', 'cssmin', 'copy:css']);

    grunt.registerTask('build', ['js', 'css']);

    grunt.registerTask('default', ['build', 'watch']);

    grunt.event.on('watch', function(action, filepath, target) {
        grunt.log.writeln(target + ': ' + filepath + ' has ' + action);
    });

}
